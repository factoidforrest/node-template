passport = require 'passport'


#TODO move most of this logic out of here and into the user model

module.exports = (app) ->

	app.post '/auth/register', (req,res) ->
		winston.info "registering user: ", req.body.email
		params = req.body
		console.log params

		#verify passwords match and are long enough 
		if acceptablePassword(params, res)
			User.forge({email : params.email}).fetch().then (usr) ->
				logger.info 'checked for user with matching email: ' + usr
				if not usr?
					user = User.forge({email: params.email})
					winston.info 'forged user', user
					user.setupLocalUser params.password, (err) ->
						res.json({success: true, errors: {}})

				else
					#a user with this email already exists
					if !usr.get('password')?
						console.log "setting new password on old user:", usr
						usr.setupLocalUser params.password, (err) ->
							res.json({success: true, errors: {}})
					else
						res.send 400,
							errors:
								email: "A user already exists with this email and they already have a password.  To change your password, login and do so through the settings menu"
				return


	app.post '/auth/local',  (req,res) ->

		console.log "finding local user to authenticate: ", email
		email = req.body.email
		password = req.body.password
		query = User.forge({
			email: email
		})
		console.log('the query is:', query)
		query.fetch().then( (user) ->
			return res.send(400, error: "Incorrect email.")  unless user
			return res.send(400, error: "You have previously logged in with this email through a social network, but not using a password.  You can register this email with a password by clicking register below and the accounts will merge, or log in with a social network.")  if !user.get('password')?
			return res.send(400, error: "Incorrect password.")  unless user.validPassword(password)
			
			#if the user email hasn't been confirmed.  When updating a user there might be a token and the old email is still valid so we check for the new_email property
			return res.send(400, error: "You must confirm your email.  Please check your inbox.")  if user.get('confirmation_token') isnt null and not user.get("new_email")?
			logger.info "localhandler found one user", user.toJSON()

			loginIfActive(user, res)

			return
		).catch (dbError) ->
			logger.error('error with database request on local login' + dbError)
			console.log('err is ', dbError)
			return res.send(500, error: 'Internal Database Error', databaseError: dbError)

	app.post '/auth/google/clientside', (req, res) ->
		accessToken = req.body.access_token
		refreshToken = req.body.refresh_token
		Authentication.findOrCreateGoogle accessToken, refreshToken, (err, user) ->
			if (err) 
				return res.send(401, {error: err})

			loginIfActive(user, res)

	app.post '/auth/facebook/clientside', (req, res) ->
		token = req.body.access_token
		Authentication.findOrCreateFacebook token, (err, user) ->
			if (err) 
				return res.send(401, {error: err})
				
			loginIfActive(user, res)

# ---
# generated by js2coffee 2.0.1


loginIfActive = (user, res) ->
	if user.get('active')
		user.createToken(type:'login').then (token) ->
			res.json {token:token}
	else
		res.send(403, error: "Account disabled.")

module.exports.acceptablePassword = acceptablePassword = (params, res) ->
	if params.password isnt params.password_confirmation
		console.log "passwords didnt match"
		res.send 400,
			errors:
				password_confirmation: "Passwords don't match"

		false
	
	#check password length
	else if typeof (params.password) is "undefined" or params.password.length < 6
		console.log "password too short"
		res.send 400,
			errors:
				password: "Password must be at least 6 characters"

		false
	else
		true



